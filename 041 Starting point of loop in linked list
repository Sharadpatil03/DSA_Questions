/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        // optimal sol :
        if(head==nullptr || head->next==nullptr){
            return nullptr;
        }


        // detect if cycle exist
        ListNode* temp=head;
        ListNode*slow=head;
        ListNode* fast=head;

        while(fast!=nullptr && fast->next!=nullptr){
            slow=slow->next;
            fast=fast->next->next;

            if(slow==fast){
                // cycle deteted, find the start of the cycle
                ListNode* entry=head;
                while(entry!=slow){
                    entry=entry->next;
                    slow=slow->next;
                }
                return entry;

            }
        }

        return nullptr;
    }
};
