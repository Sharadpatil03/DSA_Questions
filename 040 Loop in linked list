/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        // brute force :
        // map<ListNode*, int> mpp;
        // ListNode* temp = head;

        // while (temp != nullptr) {
        //     // If the node has already been seen, a cycle is detected
        //     if (mpp.find(temp) != mpp.end()) {
        //         return true;
        //     }
        //     // Mark the node as visited
        //     mpp[temp] = 1;
        //     // Move to the next node
        //     temp = temp->next;
        // }
        
        // // No cycle found
        // return false;



        // optimal sol: using slow and fast pointer.
        ListNode* temp=head;
        ListNode* slow=head;
        ListNode* fast=head;
        // if slow and fast pointer crosses then there is cycle present.
        while(fast!=nullptr && fast->next!=nullptr){
            slow=slow->next;
            fast=fast->next->next;

            if(slow==fast){
                return true;
            }
        }

       return false;



    }
};
