You are given a 0-indexed integer array nums. Rearrange the values of nums according to the following rules:

Sort the values at odd indices of nums in non-increasing order.
For example, if nums = [4,1,2,3] before this step, it becomes [4,3,2,1] after. The values at odd indices 1 and 3 are sorted in non-increasing order.
Sort the values at even indices of nums in non-decreasing order.
For example, if nums = [4,1,2,3] before this step, it becomes [2,1,4,3] after. The values at even indices 0 and 2 are sorted in non-decreasing order.
Return the array formed after rearranging the values of nums.

#include <vector>
#include <algorithm>
using namespace std;

class Solution {
public:
    vector<int> sortEvenOdd(vector<int> &nums) {
        vector<int> odd, even;

        // Separate the even and odd indexed elements
        for (int i = 0; i < nums.size(); i++) {
            if (i % 2 == 0) {
                even.push_back(nums[i]);
            } else {
                odd.push_back(nums[i]);
            }
        }

        // Sort even indices in ascending order
        sort(even.begin(), even.end());
        // Sort odd indices in descending order
        sort(odd.begin(), odd.end(), greater<int>());

        // Reconstruct the original array with sorted values
        int evenIdx = 0, oddIdx = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (i % 2 == 0) {
                // If the index is even, replace it with the sorted even value
                nums[i] = even[evenIdx++];
            } else {
                // If the index is odd, replace it with the sorted odd value
                nums[i] = odd[oddIdx++];
            }
        }

        return nums;
    }
};
