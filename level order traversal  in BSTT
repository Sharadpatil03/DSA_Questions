#include <bits/stdc++.h>
using namespace std;

class BST
{
public:
    int data;
    BST *left;
    BST *right;

    BST(int data)
    {
        this->data = data;
        left = right = nullptr;
    }
};

// Function to insert a node in the BST
BST* insert(BST* root, int value)
{
    if (root == nullptr) {
        return new BST(value);
    }

    if (value < root->data) {
        root->left = insert(root->left, value);
    } else {
        root->right = insert(root->right, value);
    }

    return root;
}

// Level order traversal: BFS using queue
vector<vector<int>> levelOrder(BST* root)
{
    vector<vector<int>> ans;
    
    if (root == nullptr)
    {
        return ans;
    }
    
    queue<BST*> q;
    
    q.push(root);
    
    while (!q.empty()) {
        int size = q.size();
        vector<int> level;
        
        for (int i = 0; i < size; i++) {
            BST* node = q.front();
            q.pop();
            
            // Add the current node's data to this level
            level.push_back(node->data);

            // Push the left and right children if they exist
            if (node->left != nullptr) {
                q.push(node->left);
            }
            if (node->right != nullptr) {
                q.push(node->right);
            }
        }
        
        ans.push_back(level); // Add the current level to the answer
    }
    
    return ans;
}

int main() {
    BST *root = nullptr;
    root = insert(root, 5);
    root = insert(root, 3);
    root = insert(root, 8);
    root = insert(root, 2);
    root = insert(root, 4);
    root = insert(root, 7);
    root = insert(root, 9);

    vector<vector<int>> result = levelOrder(root);
    
    for (auto &level : result) {
        for (int val : level) {
            cout << val << " ";
        }
        cout << endl;
    }

    return 0;
}
