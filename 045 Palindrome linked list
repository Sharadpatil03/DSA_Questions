class Solution {
public: 
      ListNode* reverse(ListNode* head){
         ListNode* prev=nullptr;
         ListNode* temp=head;
         while(temp!=nullptr){
            ListNode* front=temp->next;
            temp->next=prev;
            prev=temp;
            temp=front;
         }
         return prev;
      }
  
    bool isPalindrome(ListNode* head) {
      
        

        // optimal sol : use slow and fast ptr to find the second half and check if with first half
        // stop when fast->next->next!=nullptr


        if(head==nullptr || head->next==nullptr){
            return true;
        }
        // step 1: finding middle
        ListNode* slow=head;
        ListNode* fast=head;
        while(fast->next!=nullptr && fast->next->next!=nullptr){
            slow=slow->next;
            fast=fast->next->next;
        }

        // step 2: reverse the second half
        ListNode* newHead= reverse(slow->next);

        // step 3: compare
        ListNode* first=head;
        ListNode*second=newHead;

        while(second!=nullptr){
            if(first->val!=second->val){
             
                reverse(newHead);  // reverse the links for making it as it was
                return false;
            }
            first=first->next;
            second=second->next;
        }
        reverse(newHead);
        return true;

    }
};





  // brute force : use stack
        // stack<int>st;
        // ListNode* temp=head;
        // while(temp!=nullptr){
        //     st.push(temp->val);
        //     temp=temp->next;
        // }

        // // now check
        // temp=head;
        // while(temp!=nullptr){
        //     if(st.top()!=temp->val){
        //         return false;
        //     }
        //     st.pop();
        //     temp=temp->next;
        // }
        // return true;
