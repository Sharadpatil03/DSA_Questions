#include <bits/stdc++.h>
using namespace std;

// Merge function: Merges two sorted halves of the array
void merge(vector<int>& arr, int low, int mid, int high) {
    vector<int> temp;
    int left = low;    // Starting index of the left half
    int right = mid + 1; // Starting index of the right half
    
    // Merge the two halves into temp
    while (left <= mid && right <= high) {
        if (arr[left] <= arr[right]) {
            temp.push_back(arr[left]);
            left++;
        } else {
            temp.push_back(arr[right]);
            right++;
        }
    }
    
    // Copy the remaining elements from the left half, if any
    while (left <= mid) {
        temp.push_back(arr[left]);
        left++;
    }
    
    // Copy the remaining elements from the right half, if any
    while (right <= high) {
        temp.push_back(arr[right]);
        right++;
    }
    
    // Copy the sorted temp array back into the original array
    for (int i = low; i <= high; i++) {
        arr[i] = temp[i - low];
    }
}

// Merge sort function: Recursively divides and merges the array
void mergeSort(vector<int>& arr, int low, int high) {
    if (low < high) {
        int mid = low + (high - low) / 2;
        mergeSort(arr, low, mid);         // Sort the left half
        mergeSort(arr, mid + 1, high);    // Sort the right half
        merge(arr, low, mid, high);       // Merge the two sorted halves
    }
}

int main() {
    vector<int> arr = {3, 0, 1, 6, 9, 3};
    
    int n = arr.size();
    mergeSort(arr, 0, n - 1); // Call mergeSort with proper low and high indices
    
    // Print the sorted array
    for (int i = 0; i < arr.size(); i++) {
        cout << arr[i] << " ";
    }
    
    return 0;
}
