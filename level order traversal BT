#include <bits/stdc++.h>

using namespace std;

class BT
{
public:
    int data;
    BT *left;
    BT *right;

    BT(int data)
    {
        this->data = data;
        left = right = nullptr;
    }
};

// level order Traversal : BFS use queue
vector<vector<int>> levelOrder(BT* root){
    vector<vector<int>> ans;
    
    if(root==nullptr){
        return ans;
    }
    
    queue<BT*>q;
    
    q.push(root);
    
    while(!q.empty()){
        int size=q.size();
        vector<int>level;
        
        for(int i=0; i<size; i++){
            BT* node= q.front();
            q.pop();
            
            // Add the current node's data to this level
            level.push_back(node->data);

            // Push the left and right children if they exist
            if (node->left != nullptr)
            {
                q.push(node->left);
            }
            if (node->right != nullptr)
            {
                q.push(node->right);
            }
            
            
        }
        
        ans.push_back(level); // Add the current level to the answer
    }
    
     return ans;
}


int main() {
    
    BT *root = new BT(1);
    root->left = new BT(2);  // Corrected: BT should be root
    root->right = new BT(3); // Corrected: BT should be root
    root->left->left = new BT(4);
    root->left->right = new BT(5);
    
    
    vector<vector<int>> result = levelOrder(root);
    for(auto & level : result){
        for(int val : level){
            cout<< val <<" ";
        }
        cout<< endl;
    }
    
    
    

    return 0;
}
