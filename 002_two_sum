
#include <bits/stdc++.h>
using namespace std;
// two sum : 
vector<int>twoSum(vector<int>&arr, int target){
    
    
    // brute force: using two loops
    // int n=arr.size();
    // for(int i=0; i<n; i++){
        
    //     for(int j=i; j<n; j++){
            
    //         if(arr[i]+ arr[j]==target){
    //             return{i,j};
    //         }
    //     }
    // }
    // return{};
    
    // better sol: using map
    int n=arr.size();
    unordered_map<int, int>mp;
    
    for(int i=0; i<n; i++){
        int complement=target-arr[i];
        
        // check if complement exists in hash map
        if(mp.find(complement)!=mp.end()){
            return { mp[complement], i};
        }
        
        // add the current no and its idx into the hash map
        mp[arr[i]]=i;
    }
    return{};
    
}

int main() {
   vector<int> arr = {5, 2, 7, 15,1};
    int target = 9;
    
    // get result from the fn
    vector<int>result=twoSum(arr, target);
    // print the result
   if(!result.empty()){
       cout<< result[0]<< " "<<result[1]<<endl;
   }
   else{
       cout<<"No Solution found"<<endl;
   }
    return 0;
}
