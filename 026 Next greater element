Input: arr[] = [1 3 2 4], n = 4
Output: 3 4 4 -1
Explanation: The next larger element to 1 is 3, 3 is 4, 2 is 4 and for 4, since it doesn't exist, it is -1.

// for checking the circular manner  : make arr+ arr and then apply stack implementation, will get results.
class Solution
{
    public:
    //Function to find the next greater element for each element of the array.
    vector<long long> nextLargerElement(vector<long long> arr, int n){
        
        // brute force: 0(n^2)
    //   vector<long long> ans; // Result vector
        
    //     for(int i = 0; i < n; i++) {
    //         bool found = false;
            
    //         // Traverse the rest of the array to find the next greater element
    //         for(int j = i + 1; j < n; j++) {
    //             if(arr[j] > arr[i]) {
    //                 ans.push_back(arr[j]);
    //                 found = true;
    //                 break;
    //             }
    //         }
            
    //         // If no greater element was found, push -1
    //         if (!found) {
    //             ans.push_back(-1);
    //         }
    //     }
    //     return ans;

 // optimal sol : Using stack
       // strat traversing form end
       stack<long long>st;
        vector<long long >ans(n, -1);
       for(int i=n-1; i>=0; i--){
           
           while(!st.empty() && st.top()<=arr[i]){
               st.pop();
           }
           
            // If stack is not empty, then the top element is the next greater element
           if(!st.empty()) {
               ans[i] = st.top();
           }
           
           // push the current element  into stack
           st.push(arr[i]);
       }
       
     
       return ans;
       
    }
};
    
