
#include <bits/stdc++.h>
using namespace std;

// Binary serach tree presentation 
struct Node{
    int data;
    Node* left;
    Node* right;
    
    Node(int x){
        this->data=x;
        left=nullptr;
        right=nullptr;
    }
};


Node *insert( Node*root, int data){
    if(root==nullptr){
        return new Node(data);
    }
    
    //rec down the tree
    
    if(data< root->data){
        root->left = insert(root->left, data);
    }
    else if(data> root->data){
        root->right=insert(root->right, data);
    }
    return root;
}

Node* createBst(int arr[], int size){
    if(size==0){
        return nullptr;
    }
    
    Node*root= nullptr;
    
    for(int i=0; i<size; i++){
        root= insert(root, arr[i]);
    }
    return root;
}


void inorderTraversal(Node* root) {
    if (!root) return;
    inorderTraversal(root->left);
    cout << root->data << " ";
    inorderTraversal(root->right);
}

int main() {
  
   int arr[] = {10, 5, 15, 3, 7, 13, 18};
    int size = sizeof(arr) / sizeof(arr[0]);
    
    // create BST :
    Node* root= createBst(arr, size);
    
    cout << "Inorder Traversal of BST: ";
    inorderTraversal(root); // Output should be sorted order: 3 5 7 10 13 15 18
    cout << endl;
  


    return 0;
}
