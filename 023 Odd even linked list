Input: head = [1,2,3,4,5]
Output: [1,3,5,2,4]

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
         // steps
         // 1) connect the odd link node 
         // 2) connect the even link node
         // 3) at start store the address of first->next and then connect odd linked list end to even start
          if(head==nullptr || head->next==nullptr){
            return head;
          }

          ListNode* odd=head;
          ListNode* even=head->next;
          ListNode* evenHead=head->next;
          
          while(even!=nullptr && even->next!=nullptr){
            odd->next=odd->next->next;
            even->next=even->next->next;
            
            odd=odd->next;
            even=even->next;
            

          }
          // link the evenHead
          odd->next=evenHead;
          return head;

    }
};
